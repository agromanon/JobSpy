# Dockerfile.force_rebuild - Use this when you need to force a complete rebuild
# Usage: docker build -f Dockerfile.force_rebuild -t jobspy-frontend .

FROM python:3.11-slim

# Generate unique build identifier that changes with every build
ARG BUILD_TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
ARG BUILD_UUID=$(uuidgen | tr -d '-')
ARG RANDOM_HASH=$(head /dev/urandom | tr -dc 'a-f0-9' | fold -w 32 | head -n 1)

# Set environment variables that will force cache invalidation
ENV FORCE_REBUILD_TIMESTAMP=${BUILD_TIMESTAMP}
ENV FORCE_REBUILD_UUID=${BUILD_UUID}
ENV FORCE_REBUILD_HASH=${RANDOM_HASH}

# This RUN command will ALWAYS change, breaking the cache chain
RUN echo "=== FORCED COMPLETE REBUILD ===" && \
    echo "Build Timestamp: ${BUILD_TIMESTAMP}" && \
    echo "Build UUID: ${BUILD_UUID}" && \
    echo "Random Hash: ${RANDOM_HASH}" && \
    echo "This RUN command changes every build, breaking all Docker caching" && \
    mkdir -p /tmp/rebuild_info && \
    echo "BUILD_TIMESTAMP=${BUILD_TIMESTAMP}" > /tmp/rebuild_info/build_vars.txt && \
    echo "BUILD_UUID=${BUILD_UUID}" >> /tmp/rebuild_info/build_vars.txt && \
    echo "RANDOM_HASH=${RANDOM_HASH}" >> /tmp/rebuild_info/build_vars.txt && \
    rm -rf /var/cache/apt/* /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache /app/*

# Set working directory
WORKDIR /app

# Install system dependencies (this will now always run due to cache break above)
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    curl \
    git \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements (this will now always be fresh)
COPY requirements.admin.txt /app/requirements.admin.txt
COPY requirements.txt /app/requirements.txt

# Install dependencies (will always run due to cache break)
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.admin.txt && \
    pip install --no-cache-dir psycopg2-binary requests flask-wtf

# Copy application code (will always create fresh layers)
COPY jobspy/ /app/jobspy/
COPY worker_admin.py /app/
COPY worker_manager.py /app/
COPY modular_schema.sql /app/modular_schema.sql

# Force schema rebuild
RUN echo "Schema rebuild: $(date)" > /app/schema_rebuild_info.txt

# Create directories fresh every time
RUN rm -rf /app/templates /app/static /app/logs 2>/dev/null || true && \
    mkdir -p /app/templates /app/static/css /app/static/js /app/static/images /app/logs

# Create base template
RUN cat > /app/templates/base.html << 'TEMPLATE'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Job Scraper Admin{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    
    {% block head %}{% endblock %}
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('dashboard') }}">
                <i class="bi bi-briefcase-fill me-2"></i>
                Job Scraper Admin
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('dashboard') }}">
                            <i class="bi bi-speedometer2 me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('list_workers') }}">
                            <i class="bi bi-people me-1"></i>Workers
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('list_databases') }}">
                            <i class="bi bi-database me-1"></i>Databases
                        </a>
                    </li>
                </ul>
                
                <ul class="navbar-nav">
                    {% if session.get('logged_in') %}
                    <li class="nav-item">
                        <span class="navbar-text me-3">
                            <i class="bi bi-person-circle me-1"></i>
                            {{ session.get('username', 'Admin') }}
                        </span>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('logout') }}">
                            <i class="bi bi-box-arrow-right me-1"></i>Logout
                        </a>
                    </li>
                    {% else %}
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('login') }}">
                            <i class="bi bi-box-arrow-in-right me-1"></i>Login
                        </a>
                    </li>
                    {% endif %}
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container-fluid py-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </main>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    {% block scripts %}{% endblock %}
</body>
</html>
TEMPLATE

# Create login template
RUN cat > /app/templates/login.html << 'TEMPLATE'
{% extends "base.html" %}

{% block title %}Login - Job Scraper Admin{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6 col-lg-5">
        <div class="glass-card rounded-4 p-5">
            <div class="text-center mb-4">
                <div class="mb-3">
                    <i class="bi bi-shield-lock-fill text-primary" style="font-size: 4rem;"></i>
                </div>
                <h2 class="mb-3 fw-bold">Login</h2>
                <p class="text-muted">Enter your password to access the admin dashboard</p>
            </div>
            
            <form method="POST">
                {{ form.hidden_tag() }}
                
                <div class="mb-4">
                    <label class="form-label fw-semibold" for="{{ form.password.id }}">
                        {{ form.password.label }}
                    </label>
                    {{ form.password(class="form-control form-control-lg", placeholder="Enter admin password", autocomplete="current-password") }}
                    {% if form.password.errors %}
                        <div class="text-danger small mt-1">
                            {% for error in form.password.errors %}
                                <div>{{ error }}</div>
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                
                <div class="d-grid">
                    {{ form.submit(class="btn btn-primary btn-lg") }}
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}
TEMPLATE

# Create CSS file
RUN cat > /app/static/css/style.css << 'CSS'
body {
    background-color: #0f172a;
    color: #e2e8f0;
    min-height: 100vh;
}

/* Fix navbar layout and prevent wrapping */
.navbar {
    padding: 0.5rem 0;
    min-height: 70px;
}

.navbar-brand {
    font-size: 1.5rem;
    font-weight: 700;
    white-space: nowrap;
}

.navbar-nav {
    align-items: center;
}

.navbar-nav .nav-link {
    white-space: nowrap;
}

/* Prevent layout breaking on small screens */
@media (max-width: 768px) {
    .navbar-collapse {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 12px;
        margin-top: 1rem;
    }
    
    .navbar-nav {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .navbar-nav .nav-link {
        padding: 0.5rem 1rem;
        border-radius: 8px;
    }
    
    .navbar-nav .nav-link:hover {
        background: rgba(255, 255, 255, 0.1);
    }
    
    .navbar-text {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.1);
    }
}

/* Container fluid fixes */
.container-fluid {
    padding: 1rem;
    max-width: 100%;
}

/* Row layout stability */
.row {
    margin: 0;
}

.row > * {
    padding: 0.5rem;
}

/* Glass card layout fixes */
.glass-card {
    background: rgba(30, 41, 59, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(100, 116, 139, 0.3);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
    border-radius: 16px;
    overflow: hidden;
}

.glass-card .row {
    margin: -1rem;
}

.glass-card .row > * {
    padding: 1rem;
}

/* Metric card stability */
.metric-card {
    border: none;
    border-radius: 16px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    transition: transform 0.2s;
    position: relative;
    overflow: hidden;
}

.metric-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
    pointer-events: none;
}

.metric-card .card-body {
    position: relative;
    z-index: 1;
}

.metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
}

.metric-card .display-4 {
    font-weight: 800;
    line-height: 1;
    margin-bottom: 0.5rem;
}

/* Button layout fixes */
.btn {
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.2s ease;
    white-space: nowrap;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.btn-group {
    flex-wrap: nowrap;
}

/* Form layout fixes */
.form-control, .form-select {
    border-radius: 8px;
    border: 1px solid #475569;
    background-color: #1e293b;
    color: #e2e8f0;
    transition: all 0.2s ease;
}

.form-control:focus, .form-select:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    background-color: #1e293b;
    color: #e2e8f0;
}

.form-label {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #cbd5e1;
}

/* Alert layout fixes */
.alert {
    border: none;
    border-radius: 12px;
    backdrop-filter: blur(10px);
    margin-bottom: 1rem;
}

.alert-dismissible {
    padding-right: 3rem;
}

/* Status badge fixes */
.status-badge {
    border-radius: 20px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 600;
    font-size: 0.7rem;
    padding: 0.35rem 0.75rem;
    white-space: nowrap;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.fade-in {
    animation: fadeIn 0.5s ease-out;
}

/* Loading animations */
.loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
}

@keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}

/* Status indicators */
.status-online::before { content: '●'; color: #28a745; }
.status-offline::before { content: '●'; color: #dc3545; }
.status-warning::before { content: '●'; color: #ffc107; }

/* Responsive adjustments */
@media (max-width: 768px) {
    .container-fluid {
        padding: 0.5rem;
    }
    
    .metric-card .display-4 {
        font-size: 2rem;
    }
    
    .btn {
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        padding: 0.375rem 0.75rem;
    }
    
    .d-flex.gap-3 {
        flex-direction: column;
    }
    
    .d-flex.justify-content-end {
        flex-direction: column;
        align-items: stretch;
    }
    
    .d-flex.justify-content-end .btn {
        margin-bottom: 0.5rem;
    }
    
    .glass-card {
        margin-bottom: 1rem;
    }
    
    .row > * {
        padding: 0.25rem;
    }
}

@media (max-width: 576px) {
    .navbar-brand {
        font-size: 1.25rem;
    }
    
    .btn {
        font-size: 0.8rem;
        padding: 0.25rem 0.5rem;
    }
    
    .metric-card .display-4 {
        font-size: 1.5rem;
    }
    
    .worker-card .card-body {
        padding: 1rem;
    }
}
CSS

# Set Flask environment
ENV FLASK_APP=worker_admin.py
ENV FLASK_ENV=production
ENV PYTHONPATH=/app:/app/jobspy

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Start the application
CMD ["python", "worker_admin.py"]