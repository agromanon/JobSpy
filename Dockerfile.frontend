FROM python:3.11-slim

# Force complete cache invalidation
ARG BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
ARG COMMIT_SHA=unknown
ENV BUILD_DATE=$BUILD_DATE
ENV COMMIT_SHA=$COMMIT_SHA
RUN echo "Build: $BUILD_DATE, Commit: $COMMIT_SHA" > /etc/container_version

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.admin.txt /app/requirements.admin.txt
COPY requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r requirements.admin.txt
RUN pip install --no-cache-dir psycopg2-binary requests

# Copy JobSpy library
COPY jobspy/ /app/jobspy/

# Copy application components
COPY worker_admin.py /app/
COPY worker_manager.py /app/
COPY modular_schema.sql /app/modular_schema.sql

# Force schema cache invalidation
RUN echo "Schema file updated: $(date)" >> /app/modular_schema.sql.cache_info

# Create static directories and files
RUN mkdir -p /app/templates /app/static/css /app/static/js /app/logs
RUN chmod 755 /app/static /app/templates /app/logs

# Copy default templates and static files
RUN mkdir -p /app/templates && \
    mkdir -p /app/static/css && \
    mkdir -p /app/static/js

# Create HTML templates with enhanced styling
RUN cat > /app/templates/base.html << 'TEMPLATE'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Job Scraper Admin{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="/static/css/style.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f6f8fc;
        }
        .glass-card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
        }
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .nav-brand-gradient {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        .metric-card {
            border: none;
            border-radius: 16px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transition: transform 0.2s;
        }
        .metric-card:hover {
            transform: translateY(-2px);
        }
        .worker-card {
            border: none;
            border-radius: 12px;
            background: white;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }
        .worker-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }
        .status-badge {
            font-size: 0.65rem;
            padding: 0.35rem 0.75rem;
            border-radius: 20px;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            font-weight: 600;
        }
        .animate-pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .nav-pills .nav-link.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark gradient-bg shadow-sm">
        <div class="container-fluid">
            <a class="navbar-brand fw-bold text-white" href="{{ url_for('dashboard') }}">
                <i class="bi bi-briefcase-fill me-2"></i>
                <span class="nav-brand-gradient">Job Scraper</span>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link text-white" href="{{ url_for('dashboard') }}">
                            <i class="bi bi-speedometer2 me-1"></i>Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="{{ url_for('list_workers') }}">
                            <i class="bi bi-robot me-1"></i>Workers
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" href="{{ url_for('list_databases') }}">
                            <i class="bi bi-database me-1"></i>Databases
                        </a>
                    </li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link text-white" href="/health">
                            <i class="bi bi-heart-pulse me-1"></i>Health
                        </a>
                    </li>
                    <li class="nav-item">
                        <span class="navbar-text text-white">
                            <i class="bi bi-circle-fill text-success me-1"></i>System Online
                        </span>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container-fluid py-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show" role="alert">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-{{ 'exclamation-triangle-fill' if category == 'error' else 'check-circle-fill' }} me-2"></i>
                            <span>{{ message }}</span>
                        </div>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/static/js/app.js"></script>
    {% block scripts %}{% endblock %}
</body>
</html>
TEMPLATE

# Create dashboard template
RUN cat > /app/templates/dashboard.html << 'TEMPLATE'
{% extends "base.html" %}

{% block title %}Dashboard - Job Scraper Admin{% endblock %}

{% block content %}
<div class="row mb-4">
    <div class="col-12">
        <div class="glass-card rounded-4 p-4 mb-4">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="mb-0 fw-bold text-dark">Job Scraper Dashboard</h2>
                    <p class="text-muted mb-0">Monitor and manage your automated job scraping workers</p>
                </div>
                <div class="col-md-4 text-end">
                    <button class="btn btn-primary btn-lg me-2" onclick="location.reload()">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                    <button class="btn btn-outline-primary btn-lg" onclick="testAllConnections()">
                        <i class="bi bi-diagonal-3 me-2"></i>Test All
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="metric-card h-100">
            <div class="card-body text-center">
                <h2 class="display-4 fw-bold mb-2">{{ stats.get('total_workers', 0) }}</h2>
                <p class="mb-0 opacity-75">Total Workers</p>
                <i class="bi bi-robot position-absolute top-0 end-0 m-3 opacity-25"></i>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="metric-card h-100" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
            <div class="card-body text-center">
                <h2 class="display-4 fw-bold mb-2">{{ stats.get('active_workers', 0) }}</h2>
                <p class="mb-0 opacity-75">Active Workers</p>
                <i class="bi bi-activity position-absolute top-0 end-0 m-3 opacity-25"></i>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="metric-card h-100" style="background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);">
            <div class="card-body text-center">
                <h2 class="display-4 fw-bold mb-2">{{ stats.get('paused_workers', 0) }}</h2>
                <p class="mb-0 opacity-75">Paused Workers</p>
                <i class="bi bi-pause-circle position-absolute top-0 end-0 m-3 opacity-25"></i>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-md-6 mb-3">
        <div class="metric-card h-100" style="background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);">
            <div class="card-body text-center">
                <h2 class="display-4 fw-bold mb-2">{{ stats.get('workers_today', 0) }}</h2>
                <p class="mb-0 opacity-75">Workers Today</p>
                <i class="bi bi-calendar-check position-absolute top-0 end-0 m-3 opacity-25"></i>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-7 mb-4">
        <div class="worker-card h-100">
            <div class="card-header bg-transparent border-0 pt-4 px-4">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0 fw-bold">Recent Executions</h5>
                    <span class="badge bg-primary">Live</span>
                </div>
            </div>
            <div class="card-body px-4 pb-4">
                {% if recent_executions %}
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Worker</th>
                                    <th>Status</th>
                                    <th>Time</th>
                                    <th>Jobs</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for exec in recent_executions %}
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-robot text-primary me-2"></i>
                                                <div>
                                                    <small class="text-muted d-block">{{ exec.get('worker_name', 'N/A') }}</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge status-badge bg-{{ 'success' if exec.get('status') == 'success' else 'danger' }}">
                                                {{ exec.get('status', 'N/A') }}
                                            </span>
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                {{ exec.get('execution_start', '').strftime('%H:%M') if exec.get('execution_start') else 'N/A' }}
                                            </small>
                                        </td>
                                        <td>
                                            <span class="fw-bold">{{ exec.get('jobs_found', 0) }}</span>
                                        </td>
                                    </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                {% else %}
                    <div class="text-center py-5">
                        <i class="bi bi-clock-history text-muted" style="font-size: 4rem;"></i>
                        <h5 class="text-muted mt-3">No recent executions</h5>
                        <p class="text-muted">Workers will appear here after execution</p>
                        <a href="{{ url_for('new_worker') }}" class="btn btn-primary btn-sm mt-2">
                            <i class="bi bi-plus-circle me-1"></i>Create Worker
                        </a>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
    
    <div class="col-lg-5 mb-4">
        <div class="worker-card h-100">
            <div class="card-header bg-transparent border-0 pt-4 px-4">
                <h5 class="card-title mb-0 fw-bold">Scheduled Runs</h5>
            </div>
            <div class="card-body px-4 pb-4">
                {% if scheduled_runs %}
                    <div class="list-group list-group-flush">
                        {% for run in scheduled_runs %}
                            <div class="list-group-item px-0 border-light">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div>
                                        <h6 class="mb-1 fw-bold">{{ run.get('name', 'N/A') }}</h6>
                                        <div class="d-flex align-items-center text-muted small">
                                            <i class="bi bi-geo-alt me-1"></i>
                                            <span>{{ run.get('site', 'N/A') }}</span>
                                            <span class="ms-3">
                                                <i class="bi bi-database me-1"></i>
                                                {{ run.get('database_name', 'N/A') }}
                                            </span>
                                        </div>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge bg-primary mb-1">
                                            <i class="bi bi-clock me-1"></i>
                                            {{ run.get('next_run', '').strftime('%H:%M') if run.get('next_run') else 'N/A' }}
                                        </span>
                                        <div class="small text-muted">
                                            Every {{ run.get('schedule_hours', 24) }}h
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% else %}
                    <div class="text-center py-5">
                        <i class="bi bi-calendar-event text-muted" style="font-size: 4rem;"></i>
                        <h5 class="text-muted mt-3">No scheduled workers</h5>
                        <p class="text-muted">Create your first worker to get started</p>
                        <a href="{{ url_for('new_worker') }}" class="btn btn-primary btn-sm mt-2">
                            <i class="bi bi-plus-circle me-1"></i>Create Worker
                        </a>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="glass-card rounded-4 p-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0 fw-bold">Quick Actions</h5>
            </div>
            <div class="d-flex gap-3 flex-wrap">
                <a href="{{ url_for('new_worker') }}" class="btn btn-primary">
                    <i class="bi bi-plus-lg me-2"></i>Create Workers
                </a>
                <a href="{{ url_for('new_database') }}" class="btn btn-outline-primary">
                    <i class="bi bi-database-add me-2"></i>Add Database
                </a>
                <button class="btn btn-outline-secondary" onclick="testConnections()">
                    <i class="bi bi-diagonal-3 me-2"></i>Test Connections
                </button>
                <a href="{{ url_for('list_workers') }}" class="btn btn-outline-info">
                    <i class="bi bi-gear me-2"></i>Manage Workers
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
function testConnections() {
    showNotification('Testing all connections...', 'info');
    fetch('/api/databases/test-all')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('All connections tested successfully!', 'success');
            } else {
                showNotification('Connection test failed: ' + data.error, 'warning');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Error testing connections', 'danger');
        });
}

// Auto-refresh dashboard every 30 seconds
setInterval(() => {
    if (window.location.pathname === '/') {
        refreshDashboard();
    }
}, 30000);
</script>
{% endblock %}
TEMPLATE

# Force schema file to be processed fresh but keep original
RUN cp /app/modular_schema.sql /app/modular_schema.sql.processed

# Create error template
RUN mkdir -p /app/templates
RUN cat > /app/templates/error.html << 'TEMPLATE'
{% extends "base.html" %}

{% block title %}Error - Job Scraper Admin{% endblock %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-8 col-lg-6">
        <div class="glass-card rounded-4 p-5 text-center">
            <div class="mb-4">
                <i class="bi bi-exclamation-triangle-fill text-warning" style="font-size: 4rem;"></i>
            </div>
            <h2 class="mb-3">Oops! Something went wrong</h2>
            <p class="text-muted mb-4">{{ error }}</p>
            <div class="d-flex gap-3 justify-content-center">
                <a href="{{ url_for('dashboard') }}" class="btn btn-primary">
                    <i class="bi bi-house-door me-2"></i>Go to Dashboard
                </a>
                <a href="javascript:history.back()" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-2"></i>Go Back
                </a>
            </div>
        </div>
    </div>
</div>
{% endblock %}
TEMPLATE

# Create CSS file
RUN cat > /app/static/css/style.css << 'CSS'
body {
    background-color: #f6f8fc;
    min-height: 100vh;
}

.navbar-brand {
    font-size: 1.5rem;
    font-weight: 700;
}

.metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
}

.metric-card .display-4 {
    font-weight: 800;
    line-height: 1;
}

.status-badge {
    border-radius: 20px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 600;
    font-size: 0.7rem;
    padding: 0.35rem 0.75rem;
}

.table-hover tbody tr:hover {
    background-color: rgba(102, 126, 234, 0.05);
    transform: translateX(2px);
    transition: all 0.2s ease;
}

.list-group-item {
    border: none;
    transition: all 0.2s ease;
}

.list-group-item:hover {
    background-color: rgba(102, 126, 234, 0.05);
}

.btn {
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.2s ease;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.alert {
    border: none;
    border-radius: 12px;
    backdrop-filter: blur(10px);
}

.glass-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
}

.worker-card {
    background: white;
    border: 1px solid rgba(0, 0, 0, 0.08);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.fade-in {
    animation: fadeIn 0.5s ease-out;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .metric-card .display-4 {
        font-size: 2rem;
    }
    
    .btn {
        margin-bottom: 0.5rem;
    }
    
    .d-flex.gap-3 {
        flex-direction: column;
    }
}

/* Loading animations */
.loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
}

@keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}

/* Status indicators */
.status-online::before { content: '●'; color: #28a745; }
.status-offline::before { content: '●'; color: #dc3545; }
.status-warning::before { content: '●'; color: #ffc107; }
CSS

# Create JavaScript file
RUN cat > /app/static/js/app.js << 'JS'
// Enhanced Application JavaScript

document.addEventListener('DOMContentLoaded', function() {
    // Initialize all Bootstrap components
    initializeBootstrapComponents();
    
    // Setup global error handling
    setupErrorHandling();
    
    // Setup auto-refresh capabilities
    setupAutoRefresh();
    
    // Initialize notifications
    initializeNotifications();
    
    console.log('Job Scraper Admin initialized');
});

function initializeBootstrapComponents() {
    // Tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.forEach(function(tooltipTriggerEl) {
        new bootstrap.Tooltip(tooltipTriggerEl);
    });
    
    // Popovers
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.forEach(function(popoverTriggerEl) {
        new bootstrap.Popover(popoverTriggerEl);
    });
    
    // Toasts
    const toastElList = [].slice.call(document.querySelectorAll('.toast'));
    const toastList = toastElList.map(function(toastEl) {
        return new bootstrap.Toast(toastEl);
    });
}

function setupErrorHandling() {
    window.addEventListener('error', function(e) {
        console.error('Global error caught:', e.error);
        showNotification('An unexpected error occurred. Please refresh the page.', 'danger');
    });
    
    window.addEventListener('unhandledrejection', function(e) {
        console.error('Unhandled promise rejection:', e.reason);
        showNotification('A network error occurred. Please check your connection.', 'warning');
    });
}

function setupAutoRefresh() {
    // Auto-refresh dashboard every 30 seconds
    if (window.location.pathname === '/') {
        setInterval(() => {
            refreshDashboard();
            console.log('Auto-refreshing dashboard...');
        }, 30000);
    }
}

function initializeNotifications() {
    // Auto-dismiss success notifications
    setTimeout(() => {
        const alerts = document.querySelectorAll('.alert-success');
        alerts.forEach(alert => {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        });
    }, 5000);
}

// Notification System
function showNotification(message, type = 'info', duration = 5000) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
    alertDiv.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="bi bi-${getNotificationIcon(type)} me-2"></i>
            <span>${message}</span>
            <button type="button" class="btn-close ms-3" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    document.body.appendChild(alertDiv);
    
    // Auto-remove after duration
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, duration);
    
    return alertDiv;
}

function getNotificationIcon(type) {
    const icons = {
        'success': 'check-circle-fill',
        'danger': 'exclamation-triangle-fill',
        'warning': 'exclamation-triangle', 
        'info': 'info-circle-fill'
    };
    return icons[type] || 'info-circle-fill';
}

// Dashboard Functions
function refreshDashboard() {
    const container = document.querySelector('.container-fluid');
    if (container) {
        container.style.opacity = '0.7';
        fetch(window.location.href + '?partial=true')
            .then(response => response.text())
            .then(html => {
                container.innerHTML = html;
                container.style.opacity = '1';
                initializeBootstrapComponents();
                showNotification('Dashboard refreshed', 'success');
            })
            .catch(error => {
                console.error('Refresh error:', error);
                container.style.opacity = '1';
                showNotification('Failed to refresh dashboard', 'warning');
            });
    } else {
        window.location.reload();
    }
}

// Worker Management
function toggleWorker(workerId) {
    if (!confirm('Are you sure you want to toggle this worker?')) return;
    
    const button = event.target.closest('button');
    setLoading(button, true);
    
    fetch(`/workers/${workerId}/toggle`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Worker toggled successfully', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification('Failed to toggle worker', 'danger');
                setLoading(button, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Network error while toggling worker', 'warning');
            setLoading(button, false);
        });
}

function executeWorker(workerId) {
    if (!confirm('Execute worker manually? This will start an immediate scraping run.')) return;
    
    const button = event.target.closest('button');
    setLoading(button, true);
    
    fetch(`/workers/${workerId}/execute`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Worker execution started', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification('Failed to execute worker', 'danger');
                setLoading(button, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Network error while executing worker', 'warning');
            setLoading(button, false);
        });
}

function deleteWorker(workerId) {
    if (!confirm('Are you sure you want to delete this worker permanently? This action cannot be undone.')) return;
    
    const button = event.target.closest('button');
    setLoading(button, true);
    
    fetch(`/workers/${workerId}/delete`, {
        method: 'DELETE'
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Worker deleted successfully', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification('Failed to delete worker', 'danger');
                setLoading(button, false);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Network error while deleting worker', 'warning');
            setLoading(button, false);
        });
}

// Database Management
function testDatabase(dbId) {
    const button = event.target.closest('button');
    const originalHtml = button.innerHTML;
    
    button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Testing...';
    button.disabled = true;
    
    fetch(`/api/databases/${dbId}/test`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                button.innerHTML = '<i class="bi bi-check-circle-fill text-success"></i> Connected';
                showNotification('Database connection successful', 'success');
            } else {
                button.innerHTML = '<i class="bi bi-x-circle-fill text-danger"></i> Failed';
                showNotification('Database connection failed: ' + data.error, 'danger');
            }
            
            setTimeout(() => {
                button.innerHTML = originalHtml;
                button.disabled = false;
                location.reload();
            }, 2000);
        })
        .catch(error => {
            console.error('Error:', error);
            button.innerHTML = '<i class="bi bi-exclamation-triangle-fill text-warning"></i> Error';
            showNotification('Network error while testing database', 'warning');
            setTimeout(() => {
                button.innerHTML = originalHtml;
                button.disabled = false;
            }, 2000);
        });
}

function testAllConnections() {
    showNotification('Testing all databases...', 'info');
    
    fetch('/api/databases/test-all')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('All databases connected successfully!', 'success');
            } else {
                showNotification('Some database connections failed: ' + data.error, 'warning');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Network error while testing connections', 'warning');
        });
}

// Utility Functions
function setLoading(element, loading = true) {
    if (loading) {
        element.disabled = true;
        element.dataset.originalHtml = element.innerHTML;
        element.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Loading...';
    } else {
        element.disabled = false;
        element.innerHTML = element.dataset.originalHtml || element.innerHTML;
    }
}

function makeRequest(url, options = {}) {
    const defaultOptions = {
        headers: {
            'Content-Type': 'application/json',
        },
        credentials: 'same-origin'
    };
    
    const mergedOptions = { ...defaultOptions, ...options };
    
    return fetch(url, mergedOptions)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        });
}

function formatDateTime(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString();
}

function formatTimeAgo(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const seconds = Math.floor((now - date) / 1000);
    
    if (seconds < 60) return 'just now';
    if (seconds < 3600) return Math.floor(seconds / 60) + 'm ago';
    if (seconds < 86400) return Math.floor(seconds / 3600) + 'h ago';
    if (seconds < 2592000) return Math.floor(seconds / 86400) + 'd ago';
    if (seconds < 31536000) return Math.floor(seconds / 2592000) + 'mo ago';
    return Math.floor(seconds / 31536000) + 'y ago';
}

// Form validation
function validateForm(form) {
    const requiredFields = form.querySelectorAll('[required]');
    for (const field of requiredFields) {
        if (!field.value.trim()) {
            field.classList.add('is-invalid');
            field.focus();
            return false;
        } else {
            field.classList.remove('is-invalid');
        }
    }
    return true;
}

// Copy to clipboard
async function copyToClipboard(text) {
    try {
        await navigator.clipboard.writeText(text);
        showNotification('Copied to clipboard!', 'success');
    } catch (err) {
        console.error('Failed to copy:', err);
        showNotification('Failed to copy to clipboard', 'warning');
    }
}

// Export functions globally
window.showNotification = showNotification;
window.refreshDashboard = refreshDashboard;
window.toggleWorker = toggleWorker;
window.executeWorker = executeWorker;
window.deleteWorker = deleteWorker;
window.testDatabase = testDatabase;
window.testAllConnections = testAllConnections;
window.makeRequest = makeRequest;
window.setLoading = setLoading;
window.formatDateTime = formatDateTime;
window.formatTimeAgo = formatTimeAgo;
window.validateForm = validateForm;
window.copyToClipboard = copyToClipboard;
JS

# Set environment variables
ENV PYTHONPATH=/app:/app/jobspy
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV FLASK_APP=worker_admin.py
ENV FLASK_ENV=production

# Create a simple health check endpoint
RUN cat > /app/health.py << 'HEALTH'
from flask import Flask, jsonify
import psycopg2
import os
import sys

app = Flask(__name__)

@app.route('/health')
def health():
    try:
        # Test database connection
        db_url = os.getenv('POSTGRES_URL')
        if not db_url:
            return jsonify({
                'status': 'error',
                'message': 'POSTGRES_URL not configured'
            }), 500
        
        conn = psycopg2.connect(db_url)
        cursor = conn.cursor()
        cursor.execute('SELECT 1')
        cursor.fetchone()
        cursor.close()
        conn.close()
        
        return jsonify({
            'status': 'healthy',
            'database': 'connected',
            'service': 'frontend'
        })
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'database': 'disconnected',
            'error': str(e),
            'service': 'frontend'
        }), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=False)
HEALTH

# Expose ports
EXPOSE 5000 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health')" || exit 1

# default to flask app
CMD ["python", "worker_admin.py"]